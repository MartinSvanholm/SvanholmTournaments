@page "/admin"
@inject HttpClient httpClient
@inject IUserService userService
@inject IRoleService roleService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject ILocalStorageService localStorage
@attribute [Authorize (Roles = "Admin")]

<PageTitle>Admin Dashboard</PageTitle>

<MudGrid>

    @if (users != null)
    {
        <MudItem sm="12" md="6">
            <MudPaper Class="pa-2" Elevation="4">
                <UserTable Users="@users" _loading="@loadingUsers" OnUserClickCallback="@OpenUpdateDialog" OnRegisterCallback="@OpenRegisterDialog"/>
            </MudPaper>
        </MudItem>
    }

    @if (roles != null)
    {
        <MudItem sm="12" md="6">
            <MudPaper  Class="pa-2" Elevation="4">

                <MudTable Elevation="0" Items="@roles" Striped="true" Loading="@loadingRoles" LoadingProgressColor="Color.Info" T="Role">
                    <ToolBarContent>
                        <MudText Typo="Typo.h5">Roles</MudText>
                        <MudSpacer />
                        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Filled.Create" Color="Color.Primary" Size="Size.Small" OnClick="@(async () => RegisterRoleAsync())">Create role</MudButton>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>Rolename</MudTh>
                        <MudTh>Id</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Rolename">@context.RoleName</MudTd>
                        <MudTd DataLabel="Id">@context.Id</MudTd>
                    </RowTemplate>
                </MudTable>
            </MudPaper>
        </MudItem>
    }
</MudGrid>



@code {
    private IEnumerable<User>? users = new List<User>();
    private IEnumerable<Role>? roles;

    private bool loadingUsers = true;
    private bool loadingRoles = true;

    protected override async Task OnInitializedAsync()
    {
        await GetUsersAsync();
        await GetRolesAsync();

        if (roles == null) {
            Snackbar.Add("Could not find any users", Severity.Error);
        } 
    }

    private async Task OpenUpdateDialog(User user)
    {
        UserDTO userDTO = new();
        userDTO.MapUserDTO(user);

        DialogOptions options = new DialogOptions() { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Small, FullWidth = true };

        var parameters = new DialogParameters();
        parameters.Add("UserDTO", userDTO);
        parameters.Add("ChangePassword", false);
        parameters.Add("SuccesBtnText", "Update");

        var result = await DialogService.Show<UserDialog>($"Update: {user.Username}", parameters, options).Result;

        if(!result.Cancelled) {
            Snackbar.Add("User updated", Severity.Success);

            try {
                users = await userService.GetUsers();
            } 
            catch (RequestErrorExeption e) {
                Snackbar.Add($"Error {e.StatusCode}: {e.Message}", Severity.Error);
            }
        }
    }

    private async Task OpenRegisterDialog()
    {
        UserDTO userDTO = new();

        DialogOptions options = new DialogOptions() { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Small, FullWidth = true};

        var parameters = new DialogParameters();
        parameters.Add("UserDTO", userDTO);
        parameters.Add("ChangePassword", true);
        parameters.Add("SuccesBtnText", "Create");

        var result = await DialogService.Show<UserDialog>("Create new user", parameters, options).Result;
    }

    private async Task GetUsersAsync()
    {
        try {
            users = await userService.GetUsers();
            loadingUsers = false;
        } 
        catch (RequestErrorExeption e) {
            Snackbar.Add($"Error {e.StatusCode}: {e.Message}", Severity.Error);
            loadingUsers = false;
        }

        if (users == null) {
            Snackbar.Add("Could not find any users", Severity.Error);
        } 
    }

    private async Task GetRolesAsync()
    {
        try {
            roles = await roleService.GetRolesAsync();
            loadingRoles = false;

            await localStorage.SetItemAsync("roles", roles);
        } 
        catch (RequestErrorExeption e) {
            Snackbar.Add($"Error {e.StatusCode}: {e.Message}", Severity.Error);
            loadingRoles = false;
        }
    }

    private async Task RegisterRoleAsync()
    {
        DialogOptions options = new DialogOptions() { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Small, FullWidth = true};

        var result = await DialogService.Show<RoleDialog>("Create new user", options).Result;

        if(!result.Cancelled) {
            try {
                roles = await roleService.GetRolesAsync();
                StateHasChanged();
            }
            catch (RequestErrorExeption e) {
                Snackbar.Add($"Error {e.StatusCode}: {e.Message}", Severity.Error);
            }
        }
    }
}