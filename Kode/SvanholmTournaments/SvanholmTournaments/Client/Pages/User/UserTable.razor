@using System.Net.Http.Json
@using SvanholmTournaments.Client.Services.UserService
@using SvanholmTournaments.Shared.Exeptions
@using System.Diagnostics.CodeAnalysis

<MudTable Elevation="0" Items="@Users" Loading="@_loading" Hover="true" Striped="true" @bind-SelectedItem="@selectedUser" Filter="new Func<User,bool>(FilterFunc1)" OnRowClick="RowClickEvent" T="User">
    <ToolBarContent>
        <MudText Typo="Typo.h5">Users</MudText>
        <MudSpacer />
        <MudButton Class="ml-10" Variant="Variant.Filled" StartIcon="@Icons.Filled.Create" Color="Color.Primary" Size="Size.Small" OnClick="Register">Create user</MudButton>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Firstname</MudTh>
        <MudTh>Lastname</MudTh>
        <MudTh>Username</MudTh>
        <MudTh>Created date</MudTh>
        <MudTh>Id</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd Class="cursor-pointer" DataLabel="Firstname">@context.FirstName</MudTd>
        <MudTd Class="cursor-pointer" DataLabel="Lastname">@context.LastName</MudTd>
        <MudTd Class="cursor-pointer" DataLabel="Username">@context.Username</MudTd>
        <MudTd Class="cursor-pointer" DataLabel="Created date">@context.CreatedDate</MudTd>
        <MudTd Class="cursor-pointer" DataLabel="Id">@context.Id</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudContainer Class="pa-0">
        </MudContainer>
        
    </PagerContent>
</MudTable>

@code {
    [Parameter]
    public bool _loading { get; set; }

    [Parameter, AllowNull]
    public IEnumerable<User> Users { get; set; }

    [Parameter]
    public EventCallback<User> OnUserClickCallback { get; set; }

    [Parameter]
    public EventCallback OnRegisterCallback { get; set; }

    private MudTheme Theme = new MudTheme();

    private string searchString1 = "";

    private User selectedUser = null;

    private void RowClickEvent(TableRowClickEventArgs<User> tableRowClickEventArgs)
    {
        OnUserClickCallback.InvokeAsync(selectedUser);
    }

    private void Register()
    {
        OnRegisterCallback.InvokeAsync();
    }

    private bool FilterFunc1(User user) => FilterFunc(user, searchString1);

    private bool FilterFunc(User user, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (user.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (user.LastName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (user.Username.Contains(searchString))
            return true;

        return false;
    }
}